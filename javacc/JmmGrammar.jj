PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
	< PLUS : "+" > |
	< MINUS : "-" > |
	< TIMES : "*" > |
	< DIVIDE : "/" > |
	< LOWER_THAN : "<" > |
	< EQUAL : "=" > |
    < AND : "&&" > |
	< OPEN_PAREN : "(" > |
	< CLOSE_PAREN : ")" > |
	< OPEN_SQUARE_PAREN : "[" > |
	< CLOSE_SQUARE_PAREN : "]" > |
	< OPEN_CURLY_PAREN : "{" > |
	< CLOSE_CURLY_PAREN : "}" > |
	< COMMA : "," > |
	< DOT : "." > |
	< END_EXPRESSION : ";" > |
	< NOT : "!" > |
	< IMPORT : "import" > |
	< CLASS : "class" > |
	< EXTENDS : "extends" > |
	< BOOLEAN : "boolean" > |
	< INT : "int" > |
	< PUBLIC : "public" > |
	< RETURN : "return" > |
	< STATIC : "static" > |
	< VOID : "void" > |
	< MAIN : "main" > |
	< STRING : "String" > |
	< IF : "if" > |
	< ELSE : "else" > |
	< WHILE : "while" > |
	< LENGTH : "length" > |
	< THIS : "this" > |
	< NEW : "new" > |
	< TRUE : "true" > |
	< FALSE : "false" > |
	< NULL : "null" > |
	< INTEGER : (["0" - "9"])+ > |
	< IDENTIFIER : (["A" - "Z", "a" - "z"] | "_" | "$") ((["A" - "Z", "a" - "z", "0" - "9"] | "_" | "$"))* >
;

Start #void:
    Program <EOF>
;

Factor #void:
	< INTEGER > #IntegerLiteral |
	< MINUS> Factor |
	< OPEN_PAREN > AdditiveExpression < CLOSE_PAREN >
;

Program #void:
    ImportDeclaration ClassDeclaration < EOF >
;

ImportDeclaration:
    (
        < IMPORT > < IDENTIFIER > (< DOT > < IDENTIFIER >)* < END_EXPRESSION >
    )*
;

Type #void:
    < INT > (< OPEN_SQUARE_PAREN > < CLOSE_SQUARE_PAREN >)? #a_or_i |
    < BOOLEAN > #bool |
    < STRING > #str |
    < IDENTIFIER > #Id
;


ClassDeclaration #void:
    < CLASS > < IDENTIFIER > (< EXTENDS > < IDENTIFIER >)? < OPEN_CURLY_PAREN > (VarDeclaration)* (MethodDeclaration)* < CLOSE_CURLY_PAREN >
;

VarDeclaration:
    Type < IDENTIFIER > < END_EXPRESSION >
;

MethodDeclaration #void:
    < PUBLIC > (Type < IDENTIFIER > < OPEN_PAREN > (Type < IDENTIFIER > (< COMMA > Type < IDENTIFIER >)*)? < CLOSE_PAREN > < OPEN_CURLY_PAREN > ((SCAN 2 VarDeclaration)*
    (Statement)*) < RETURN > Expression < END_EXPRESSION > < CLOSE_CURLY_PAREN > | < STATIC > < VOID > < MAIN > < OPEN_PAREN > < STRING > < OPEN_SQUARE_PAREN >
    < CLOSE_SQUARE_PAREN > < IDENTIFIER > < CLOSE_PAREN > < OPEN_CURLY_PAREN > ((SCAN 2 VarDeclaration)* (Statement)*) < CLOSE_CURLY_PAREN >)
;

Statement #void:
    < OPEN_CURLY_PAREN > (Statement)* < CLOSE_CURLY_PAREN > |
    < IF > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement < ELSE > Statement |
    < WHILE > < OPEN_PAREN > Expression < CLOSE_PAREN > Statement |
    (SCAN 2 <IDENTIFIER>  <EQUAL> Expression <END_EXPRESSION> |
    (SCAN 2 <IDENTIFIER> < OPEN_SQUARE_PAREN > Expression < CLOSE_SQUARE_PAREN > <EQUAL> Expression <END_EXPRESSION> |
    Expression <END_EXPRESSION>))
;
/**
ExpressionFirst:
    < INTEGER > | < FALSE > | < TRUE > | < IDENTIFIER > | < THIS > |
    < NEW > ( < INT > < OPEN_SQUARE_PAREN > Expression < CLOSE_SQUARE_PAREN > | < IDENTIFIER > < OPEN_PAREN > < CLOSE_PAREN > ) |
    < NOT > Expression |
    < OPEN_PAREN > Expression < CLOSE_PAREN >
;

Expression:
    ExpressionFirst (
                      ( < AND > | < LOWER_THAN > | < PLUS > | < MINUS > | < TIMES > | < DIVIDE >) Expression |
                      < OPEN_SQUARE_PAREN > Expression < CLOSE_SQUARE_PAREN > |
                      < DOT > ( < LENGTH > | < IDENTIFIER > < OPEN_PAREN > ( Expression (< COMMA > Expression )* )? < CLOSE_PAREN > )
                    )*
;
**/
Assignment #void:
    AndExpression ((< EQUAL > AndExpression) ({jjtThis.put("op", "assign");}) #BinOp(2))*
;

AndExpression #void:
    LowerExpression ((< AND > LowerExpression) ({ jjtThis.put("op", "and"); }) #BinOp(2))*
;

LowerExpression #void:
    AdditiveExpression ((< LOWER_THAN > AdditiveExpression) ({ jjtThis.put("op", "lower"); }) #BinOp(2))*
;

AdditiveExpression #void:
    MultiplicativeExpression
    (
        (< PLUS > MultiplicativeExpression) ({ jjtThis.put("op", "add"); }) #BinOp(2) |
        (< MINUS > MultiplicativeExpression) ({ jjtThis.put("op", "sub"); }) #BinOp(2)
    )*
 ;

MultiplicativeExpression #void:
	CreationExpression
	(
	    (< TIMES > CreationExpression) ({ jjtThis.put("op", "mult"); }) #BinOp(2) |
        (< DIVIDE > CreationExpression) ({ jjtThis.put("op", "div"); }) #BinOp(2)
	)*
;

CreationExpression #void:
    NotExpression (< NEW > NotExpression)*
;

NotExpression #void:
    (ArrayAccess | MemberAccess) (< NOT > ArrayAccess | MemberAccess)*
;

ArrayAccess #void:
    ExpressionTerminal (< OPEN_SQUARE_PAREN > Expression < CLOSE_SQUARE_PAREN >)*
;

MemberAccess #void:
    ExpressionTerminal (< DOT > Expression)*
;

ExpressionTerminal #void:
    < INTEGER > | < FALSE > | < TRUE > | < IDENTIFIER > | < THIS > | < OPEN_PAREN > Expression < CLOSE_PAREN >
;

Expression:
    Assignment
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}


