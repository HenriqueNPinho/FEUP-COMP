PARSER_PACKAGE=pt.up.fe.comp;
PARSER_CLASS=JmmGrammarParser;
SMART_NODE_CREATION=false;
TOKENS_ARE_NODES = false;

SKIP : " " | "\t" | "\r" | "\n";

TOKEN :
    < AND : "&&" > |
    < BOOLEAN : "boolean" > |
    < CLASS : "class" > |
    < CLOSE_CURLY_PAREN : "}" > |
    < CLOSE_PAREN : ")" > |
    < CLOSE_SQUARE_PAREN : "]" > |
    < COMMA : "," > |
    < DIVIDE : "/" > |
    < DOT : "." > |
    < END_EXPRESSION : ";" > |
    < EQUAL : "=" > |
    < EXTENDS : "extends" > |
    < ELSE : "else" > |
    < FALSE : "false" > |
    < IMPORT : "import" > |
    < INT : "int" > |
    < INTEGER : (["0" - "9"])+ > |
    < IF : "if" > |
    < LOWER_THAN : "<" > |
    < LENGTH : "length" > |
    < MAIN : "main" > |
	< MINUS : "-" > |
	< NOT : "!" > |
	< NEW : "new" > |
    < NULL : "null" > |
	< OPEN_CURLY_PAREN : "{" > |
	< OPEN_PAREN : "(" > |
	< OPEN_SQUARE_PAREN : "[" > |
	< PLUS : "+" > |
	< PUBLIC : "public" > |
	< RETURN : "return" > |
	< STATIC : "static" > |
	< STRING : "String" > |
	< THIS : "this" > |
	< TIMES : "*" > |
	< TRUE : "true" > |
	< VOID : "void" > |
	< WHILE : "while" > |
	< IDENTIFIER : (["A" - "Z", "a" - "z"] | "_" | "$") ((["A" - "Z", "a" - "z", "0" - "9"] | "_" | "$"))* >
;

Start #void:
    Program <EOF>
;

Program:
    ImportDeclaration ClassDeclaration < EOF >
;

ImportDeclaration #void:
    (
        (< IMPORT > FirstImport (< DOT > < IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Id)* < END_EXPRESSION >) #ImportDeclaration
    )*
;

FirstImport #void:
    < IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Id
;

Type #void:
    < INT > |
    < BOOLEAN > |
    < STRING > |
    < IDENTIFIER >
;

TypeArray #void:
    < INT > < OPEN_SQUARE_PAREN > < CLOSE_SQUARE_PAREN >
;

StringArray #void:
    < STRING > < OPEN_SQUARE_PAREN > < CLOSE_SQUARE_PAREN >
;

ClassDeclaration:
    < CLASS > ClassName < OPEN_CURLY_PAREN > (VarDeclaration)? (MethodDeclaration)* < CLOSE_CURLY_PAREN >
;

ClassName #Id:
    (< IDENTIFIER > { jjtThis.put("name", lastConsumedToken.getImage()); }) (< EXTENDS > (< IDENTIFIER >  {jjtThis.put("extends", lastConsumedToken.getImage()); }) )?
;

VarDeclaration:
    (VarName < END_EXPRESSION >)+
;

VarName #Id:
    SCAN 2 (((SCAN 2 (TypeArray { jjtThis.put("type", "integer array"); }) | (Type { jjtThis.put("type", lastConsumedToken.getImage()); })))  < IDENTIFIER >) ({ jjtThis.put("name", lastConsumedToken.getImage()); })
;

MethodDeclaration #void:
    < PUBLIC > ( GeneralMethod | MainMethod )
;

MainMethod #MethodDeclaration:
    < STATIC > ({ jjtThis.put("static", "true"); })  < VOID > ({ jjtThis.put("return type", lastConsumedToken.getImage()); })  < MAIN > ({ jjtThis.put("name", lastConsumedToken.getImage()); })  < OPEN_PAREN > ParamDeclarationMain  < CLOSE_PAREN >
    < OPEN_CURLY_PAREN > ((SCAN 2 VarDeclaration)* (Statement)*) < CLOSE_CURLY_PAREN >
;

GeneralMethod #MethodDeclaration:
    (SCAN 2 (TypeArray { jjtThis.put("return type", "integer array"); }) | (Type { jjtThis.put("return type", lastConsumedToken.getImage()); })) < IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) < OPEN_PAREN > (Param)? < CLOSE_PAREN >
    < OPEN_CURLY_PAREN > ((SCAN 2 VarDeclaration)*  (Statement)*) < RETURN > Expression #ReturnExp(1) < END_EXPRESSION > < CLOSE_CURLY_PAREN >
;

Param #Parameters:
    ParamDeclaration (< COMMA > ParamDeclaration)*
;

ParamDeclaration #void:
    ((SCAN 2 (TypeArray {jjtThis.put("type", "integer array"); }) | (Type { jjtThis.put("type", lastConsumedToken.getImage()); })) < IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); })) #Id
;

ParamDeclarationMain #Parameters:
    ((StringArray {jjtThis.put("type", "string array"); }) < IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); })) #Id
;

Statement #void:
    (< OPEN_CURLY_PAREN > (Statement)* < CLOSE_CURLY_PAREN >) #StatementScope |
    IfStatement |
    WhileStatement |
    SCAN 2 ((< IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); })  < EQUAL >) Expression < END_EXPRESSION >) #Assignment(1) |
    SCAN 2 ((< IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) < OPEN_SQUARE_PAREN >) Expression < CLOSE_SQUARE_PAREN > < EQUAL > Expression < END_EXPRESSION >) #ArrayAssignment(2) |
    Expression < END_EXPRESSION > #StatementExpression(1)
;


WhileStatement #void:
     (< WHILE > < OPEN_PAREN > Expression #Condition(1) < CLOSE_PAREN > Statement) #WhileStatement(2)
;

IfStatement #void:
     (< IF > < OPEN_PAREN > Expression #Condition(1) < CLOSE_PAREN > Statement #IfTrue(1) < ELSE > Statement #IfFalse(1)) #IfStatement(3)
;

Expression #void:
    AndExpression
;

AndExpression #void:
    LowerExpression ((< AND > LowerExpression) ({ jjtThis.put("op", "and"); }) #BinOp(2))*
;

LowerExpression #void:
    AdditiveExpression ((< LOWER_THAN > AdditiveExpression) ({ jjtThis.put("op", "lower"); }) #BinOp(2))*
;

AdditiveExpression #void:
    MultiplicativeExpression
    (
        (< PLUS >  MultiplicativeExpression) ({ jjtThis.put("op", "add"); }) #BinOp(2) |
        (< MINUS > MultiplicativeExpression) ({ jjtThis.put("op", "sub"); }) #BinOp(2)
    )*
 ;

MultiplicativeExpression #void:
	CreationExpression
	(
	    (< TIMES > CreationExpression) ({ jjtThis.put("op", "mult"); }) #BinOp(2) |
        (< DIVIDE > CreationExpression) ({ jjtThis.put("op", "div"); }) #BinOp(2)
	)*
;

CreationExpression #void:
    NotExpression ((< NEW > NotExpression) ({ jjtThis.put("op", "new"); }) #UnOp(1))*
;

NotExpression #void:
    ExpressionTerminal |
    (< NOT > Expression) ({ jjtThis.put("op", "not"); }) #UnOp(1)
;

ExpressionTerminal #void:
    ExpressionFirst (
                    (< OPEN_SQUARE_PAREN > Expression < CLOSE_SQUARE_PAREN >) #ArrayAccess(2) |
                    < DOT > (< LENGTH > #LengthOp(1) | (MethodCall Arguments) #MethodCall(3))
                    )*
;

ExpressionFirst #void :
    IntLiteral | < FALSE > ({ jjtThis.put("value", "false"); }) #Bool | < TRUE > ({ jjtThis.put("value", "true"); }) #Bool | < IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Id  | < THIS >  ({ jjtThis.put("name", "this"); }) #Id |
    < NEW > ((< INT > < OPEN_SQUARE_PAREN > Expression < CLOSE_SQUARE_PAREN >) #IntArrayInitialization | (< IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Id < OPEN_PAREN > < CLOSE_PAREN > ) #ClassInitialization) |
    < OPEN_PAREN > Expression < CLOSE_PAREN >
;

Arguments:
    < OPEN_PAREN > (Argument)? (< COMMA > Argument)* < CLOSE_PAREN >
;

Argument #void:
    Expression
;

MethodCall #void:
    < IDENTIFIER > ({ jjtThis.put("name", lastConsumedToken.getImage()); }) #Id
;

IntLiteral :
    < INTEGER > ({ jjtThis.put("value", lastConsumedToken.getImage()); })
;

// Injections for the implementation of JmmNode
// Since this is injected into BaseNode, it affects only non-terminals
INJECT BaseNode :
		import pt.up.fe.comp.jmm.ast.JmmNode;
		import pt.up.fe.comp.jmm.ast.AJmmNode;
		import pt.up.fe.specs.util.SpecsCollections;
		extends AJmmNode
{
    @Override
    public List<JmmNode> getChildren() {

        return SpecsCollections.cast(children(), JmmNode.class);
    }

    @Override
    public void add(JmmNode child, int index) {

        if (child instanceof Node) {

            addChild(index, (Node) child);
        } else {

            throw new RuntimeException("Node " + child + " is not a Node.");
        }

    }
}


